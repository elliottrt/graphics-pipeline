
10/17
	Color requires model-space interpolation not screen-space,
	TODO: we should convert our existing functions to do that
	TODO: actual bilinear sampling - https://en.wikipedia.org/wiki/Bilinear_interpolation#On_the_unit_square
		weight on distance to each sample
		if exactly at the center of one of the samples, that weight should be 1 and all others should be 0

	TODO: video sprite also means cutout, meaning we need to re-add the ability to discard pixels...
		or we can just say a specific color means to discard the pixel - maybe some color greater than 1?

	TODO: could do mipmapping - just create texture of half width and half height where each pixel is an average of its corresponding pixels
		1024x1024 to 512x512 to 256x256 to ...
		to prevent quickly switching between textures and making flashing stuff, linearly interpolate between 2 best matching levels of detail as you get closer
			using linear weights of (desired-scale - lower-scale) / (higher-scale - lower-scale)
	

10/6

	add detail without increasing #triangles, #vertices

	get triangle mesh rectangle - we have Mesh::LoadPlane(V3 pos, V3 size, V3 color)
	each vertex has an st texture coordinate
		these coordinates need to be `normalized`
			s \in [0, 1], t \in [0, 1]
		interpolate across the triangle to get the st for each pixel
			go back to the image and get the color at that point
			we already implemented GetColor(s, t)

	where does each pixel on a triangle map to the texture (which texel on the texture)?
	
	for now, don't worry about color/blending. just use the texture color

	P = v1 + (v2 - v1)k + (v3 - v1)l
	P = C + (c + ua + vb)w

	    matrix from columns       vector     matrix(fromcols) vector scalar
	[v1 - c, v2 - c, v3 - c][1 - k - l, k, l] = [a, b, c][u, v, 1]w

	Q = [v1 - c, v2 - c, v3 - c]^(-1) * [a, b, c]

	see Lectures/RastParInterp

	setup(3 vertices, camera, r at the vertices)
		sets up the denominator of the equations

	don't write out the long equations by hand, use dot product
	can even do Q.Transpose() * r for the denominator
